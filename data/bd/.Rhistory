nus
inmse <- matrix(NA, NROW(nus), 1)
for(ni in 1:NROW(nus))
{
pp <- bsr(f=Z, z=xr, nu=nus[ni], hs=1)
inmse[ni,1] <- pp$se
}
inmse
nus <- nus[which.min(inmse)]
nus
rm(list=ls(all=TRUE))
source("E:/Dropbox/QUB-Teaching/PhD/Pengcheng/REER_codes/functions.R")
# Load your R image with all the results
load("E:/Dropbox/QUB-Teaching/PhD/Pengcheng/REER_codes/temp_us-MONTHLY-2000-01-01.RData")
load("E:/Dropbox/QUB-Teaching/PhD/Pengcheng/REER_codes/us-MONTHLY-2000-01-01.RData")
View(pfh1)
View(pfh12)
f <- get.NOnas(rfh1)   # Forecasts
View(ff)
g <- r[rownames(f),]   # True values for the same dates as above
g
d <- as.Date(rownames(f))
min(d)
max(d)
# Let's say you want to calculate the Root Mean Squared Forecast Error
# for the crisis period
# "2007-01-01" - "2010-01-01"
dfrom <- which(d>=as.Date("2007-01-01"))
f.use <- f[dfrom,]
g.use <- g[dfrom]
d <- as.Date(rownames(f.use))
dto <- which(d<=as.Date("2010-01-01"))
f.use <- f.use[dto,]
g.use <- g.use[dto]
f.use
g.use
e.use <- matrix(g.use, NROW(g.use), NCOL(f.use))-f.use
RMSFE <- sqrt(colMeans(e.use^2))
RMSFE
RMSFE/RMSFE["AR(1)"]
best <- rownames(as.matrix(which.min(RMSFE/RMSFE["AR(1)"])))
best
xplot <- cbind(g.use, f.use[,"AR(1)"], f.use[,best])
xplot <- xplot*100
dd <- as.Date(rownames(xplot))
plot(dd, xplot[,1], type="l", ylim=c(min(xplot), max(xplot)),
main="REER Forecasting in Growth (RMSE)", xlab="", ylab="%")
lines(dd, xplot[,2], col="blue")
lines(dd, xplot[,3], col="red")
legend("topleft", legend=c("True", "AR(1)", best),
col=c("black", "blue", "red"), lty=c(1, 1, 1), cex=0.8)
# You could also calculate the Sign Success Ratio
# i.e. a statistic which counts how many times you correctly
# forecast the direction (i.e. Increase/Decrease)
SSR <- NULL
for(i in 1:NCOL(f.use))
{
SSR.temp <- mean(as.double(sign(g.use)==sign(f.use[,i])))
SSR <- c(SSR, SSR.temp)
}
SSR <- matrix(SSR)
rownames(SSR) <- colnames(f.use)
SSR
best <- rownames(SSR)[which.max(SSR)]
best
xplot <- cbind(g.use, f.use[,"AR(1)"], f.use[,best])
xplot <- xplot*100
dd <- as.Date(rownames(xplot))
plot(dd, xplot[,1], type="l", ylim=c(min(xplot), max(xplot)),
main="REER Forecasting in Growth (SSR)", xlab="", ylab="%")
lines(dd, xplot[,2], col="blue")
lines(dd, xplot[,3], col="red")
legend("topleft", legend=c("True", "AR(1)", best),
col=c("black", "blue", "red"), lty=c(1, 1, 1), cex=0.8)
f <- get.NOnas(pfh1)
g <- p[rownames(f),]
dfrom <- which(d>=as.Date("2007-01-01"))
f.use <- f[dfrom,]
g.use <- g[dfrom]
d <- as.Date(rownames(f.use))
dto <- which(d<=as.Date("2010-01-01"))
f.use <- f.use[dto,]
g.use <- g.use[dto]
e.use <- matrix(g.use, NROW(g.use), NCOL(f.use))-f.use
RMSFE <- sqrt(colMeans(e.use^2))
RMSFE/RMSFE["AR(1)"]
best <- rownames(as.matrix(which.min(RMSFE/RMSFE["AR(1)"])))
best
# Make a plot
# Select the series you want to plot first
xplot <- cbind(g.use, f.use[,"AR(1)"], f.use[,best])
xplot <- xplot
dd <- as.Date(rownames(xplot))
plot(dd, xplot[,1], type="l", ylim=c(min(xplot), max(xplot)),
main="REER Forecasts in Levels", xlab="", ylab="")
lines(dd, xplot[,2], col="blue")
lines(dd, xplot[,3], col="red")
legend("topleft", legend=c("True", "AR(1)", best),
col=c("black", "blue", "red"), lty=c(1, 1, 1), cex=0.8)
SSR <- NULL
for(i in 1:NCOL(f.use))
{
SSR.temp <- mean(as.double(sign(g.use)==sign(f.use[,i])))
SSR <- c(SSR, SSR.temp)
}
SSR <- matrix(SSR)
rownames(SSR) <- colnames(f.use)
best <- rownames(SSR)[which.max(SSR)]
best
xplot <- cbind(g.use, f.use[,"AR(1)"], f.use[,best])
xplot <- xplot*100
dd <- as.Date(rownames(xplot))
plot(dd, xplot[,1], type="l", ylim=c(min(xplot), max(xplot)),
main="REER Forecasting in Growth (SSR)", xlab="", ylab="%")
lines(dd, xplot[,2], col="blue")
lines(dd, xplot[,3], col="red")
legend("topleft", legend=c("True", "AR(1)", best),
col=c("black", "blue", "red"), lty=c(1, 1, 1), cex=0.8)
RMSFE/RMSFE["AR(1)"]
View(Ztemp)
rm(list=ls(all=TRUE))
source("E:/Dropbox/20160224-New Papers/REER_codes/functions.R")
# Load your R image with all the results
load("E:/Dropbox/20160224-New Papers/REER_codes/us-MONTHLY(1978-02-01)-2000-01-01.RData")
# Say you want to make some tables for the 1-step ahead forecasts
# using the growth
f <- get.NOnas(rfh1)   # Forecasts
g <- r[rownames(f),]   # True values for the same dates as above
# Check the dates you have
d <- as.Date(rownames(f))
min(d)
max(d)
# Let's say you want to calculate the Root Mean Squared Forecast Error
# for the crisis period
# "2007-01-01" - "2010-01-01"
dfrom <- which(d>=as.Date("2007-01-01"))
f.use <- f[dfrom,]
g.use <- g[dfrom]
d <- as.Date(rownames(f.use))
dto <- which(d<=as.Date("2010-01-01"))
f.use <- f.use[dto,]
g.use <- g.use[dto]
# Calculate the error term first
e.use <- matrix(g.use, NROW(g.use), NCOL(f.use))-f.use
# And then
RMSFE <- sqrt(colMeans(e.use^2))
RMSFE
# Print the RSMFE relative to the AR(1) benchmark
RMSFE/RMSFE["AR(1)"]
source('~/.active-rstudio-document', echo=TRUE)
plot(x, type="l", main="Time-Varying AR")
abline(v=c(breaks.d, Nobs), lty=2)
plot(beta.est, type="l", main="Estimated AR Coefficient")
abline(v=c(breaks.d, Nobs), lty=2)
source('~/.active-rstudio-document', echo=TRUE)
y <- rnorm(NROW(x))
# Check that the simulation is correct
rho <- matrix(NA, Nobs, 1)
H <- Nobs^0.5
for(t in seq(2, Nobs, 1))
{
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs-1, 1))/H)^2)/2)
rho[t, 1] <- cor(K*x, K*y)
}
warnings()
NROW(X)
NROW(x)
NROW(y)
NROW(K)
# Check that the simulation is correct
rho <- matrix(NA, Nobs, 1)
H <- Nobs^0.5
for(t in seq(2, Nobs, 1))
{
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
rho[t, 1] <- cor(K*x, K*y)
}
plot(rho, type="l")
t <- 2
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
K
round(K, 2)
H <- Nobs^0.2
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
round(K, 2)
H <- Nobs^0.3
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
round(K, 2)
H <- Nobs^0.28
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
round(K, 2)
H <- Nobs^0.25
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
round(K, 2)
plot(rho, type="l")
rho <- matrix(NA, Nobs, 1)
H <- Nobs^0.25
for(t in seq(2, Nobs, 1))
{
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
rho[t, 1] <- cor(K*x, K*y)
}
plot(rho, type="l")
# Check that the simulation is correct
rho <- matrix(NA, Nobs, 1)
H <- Nobs^0.5
for(t in seq(2, Nobs, 1))
{
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
rho[t, 1] <- cor(K*x, K*y)
}
plot(rho, type="l")
# Check that the simulation is correct
rho <- matrix(NA, Nobs, 1)
H <- Nobs^0.8
for(t in seq(2, Nobs, 1))
{
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
rho[t, 1] <- cor(K*x, K*y)
}
plot(rho, type="l")
# Check that the simulation is correct
rho <- matrix(NA, Nobs, 1)
H <- Nobs^0.1
for(t in seq(2, Nobs, 1))
{
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
rho[t, 1] <- cor(K*x, K*y)
}
plot(rho, type="l")
# Check that the simulation is correct
rho <- matrix(NA, Nobs, 1)
H <- Nobs^0.2
for(t in seq(2, Nobs, 1))
{
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
rho[t, 1] <- cor(K*x, K*y)
}
plot(rho, type="l")
# Check that the simulation is correct
rho <- matrix(NA, Nobs, 1)
H <- Nobs^0.3
for(t in seq(2, Nobs, 1))
{
K <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
rho[t, 1] <- cor(K*x, K*y)
}
plot(rho, type="l")
t <- 1
K2 <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
t <- 100
K3 <- (1/sqrt(2*pi))*exp(-(((t-seq(1, Nobs, 1))/H)^2)/2)
write.csv(cbind(K2, K3),
"E:\\Dropbox\\QUB-Teaching\\PhD\\Jiadong\\IO-Smoothing\\Fotis-Jiadong\\RSM new 2016.01\\Kernel\\KK.csv")
rm(list=ls(all=TRUE))
crit <- function(q, x, l, w.fun)
{
s <- as.double(x>=0)
ss <- matrix(NA, NROW(x), 1)
for(i in l:NROW(s)){ ss[i,1] <- mean(s[(i-l+1):i]) }
# drop the last period
ss <- ss[1:(NROW(ss)-1),]
s.long <- which(ss>=q)
s.short <- which(ss<q)
if(NROW(s.long)==0){  x.long <- 0 }else{ x.long <- x[s.long+1] }
if(NROW(s.short)==0){  x.short <- 0 }else{ x.short <- -x[s.short+1] }
if(w.fun=="mean"){  fout <- mean(mean(x.long),mean(x.short)) }
if(w.fun=="sd"){    fout <- mean(sd(x.long),sd(x.short)) }
if(w.fun=="SR"){    fout <- mean(mean(x.long)/sd(x.long),
mean(x.short)/sd(x.short)) }
return(fout)
}
x <- rnorm(24)
l <- 12
w.fun <- "mean"
x
l <- 12
w.fun <- "mean"
x1 <- optimize(crit, c(0,1), x=x, l=l, w.fun=w.fun, maximum=TRUE)
x1
# Now do the grid search
qd <- seq(0, 1, 0.001)
qev <- matrix(NA, NROW(qd), 1)
s <- as.double(x>=0)
ss <- matrix(NA, NROW(x), 1)
for(i in l:NROW(s)){ ss[i,1] <- mean(s[(i-l+1):i]) }
# drop the last period
ss <- ss[1:(NROW(ss)-1),]
for(i in 1:NROW(qd))
{
iq <- qd[i]
s.long <- which(ss>=iq)
s.short <- which(ss<iq)
if(NROW(s.long)==0){  x.long <- 0 }else{ x.long <- x[s.long+1] }
if(NROW(s.short)==0){  x.short <- 0 }else{ x.short <- -x[s.short+1] }
if(w.fun=="mean"){  fout <- mean(mean(x.long),mean(x.short)) }
if(w.fun=="sd"){    fout <- mean(sd(x.long),sd(x.short)) }
if(w.fun=="SR"){    fout <- mean(mean(x.long)/sd(x.long),
mean(x.short)/sd(x.short)) }
qev[i,1] <- fout
}
if(w.fun=="mean"|w.fun=="SR"){
x2 <- qd[min(which(qev==max(qev)))]
}
if(w.fun=="sd"){
x2 <- qd[min(which(qev==min(qev)))]
}
x1$maximum
x2
qev
x1
source('~/.active-rstudio-document', echo=TRUE)
colnames(data)
library(quantmod)
getSymbols('CPIAUCSL', 'INDPRO', 'DGS10', 'DEXUSEU',
'UNRATE', 'PAYEMS',
src='FRED')
getSymbols("CPIAUCSL", "INDPRO", "DGS10", "DEXUSEU",
"UNRATE", "PAYEMS",
src="FRED")
getSymbols("CPIAUCSL", "INDPRO", "DGS10", "DEXUSEU",
"UNRATE", "PAYEMS")
getSymbols.FRED("CPIAUCSL", "INDPRO", "DGS10", "DEXUSEU",
"UNRATE", "PAYEMS")
getSymbols.FRED("CPIAUCSL")
rm(list=ls(all=TRUE))
library(quantmod)
getSymbols.FRED("CPIAUCSL")
k<- getSymbols.FRED(c("CPIAUCSL", "INDPRO", "DGS10", "DEXUSEU",
"UNRATE", "PAYEMS"))
k<- getSymbols.FRED(c("CPIAUCSL", "INDPRO", "DGS10", "DEXUSEU",
"UNRATE", "PAYEMS"),env=NULL)
k<- getSymbols.FRED(c("CPIAUCSL", "INDPRO", "DGS10", "DEXUSEU",
"UNRATE", "PAYEMS"),env=as.environment("DATA.ENV"))
k<- getSymbols.FRED(c("CPIAUCSL", "INDPRO", "DGS10", "DEXUSEU",
"UNRATE", "PAYEMS"),env=globalenv())
fix(UNRATE)
x <- read.csv("C:/Users/3047380/Desktop/jp.csv", header=TRUE)
xd <- x[,1]
x <- as.matrix(x[,2:3])
x <- apply(x, 2, as.numeric)
View(x)
myprobit <- glm(x[,2] ~ x[,1], family = binomial(link = "probit"))
summary(myprobit)
lm(x[,2]~x[,1])
summary(lm(x[,2]~x[,1]))
x <- read.csv("C:/Users/3047380/Desktop/jp2.csv", header=TRUE)
xd <- x[,1]
x <- as.matrix(x[,2:3])
x <- apply(x, 2, as.numeric)
myprobit <- glm(x[,2] ~ x[,1], family = binomial(link = "probit"))
summary(lm(x[,2]~x[,1]))
x <- read.csv("C:/Users/3047380/Desktop/us.csv", header=TRUE)
xd <- x[,1]
x <- as.matrix(x[,2:3])
x <- apply(x, 2, as.numeric)
myprobit <- glm(x[,2] ~ x[,1], family = binomial(link = "probit"))
summary(lm(x[,2]~x[,1]))
summary(lm(x[,2]~x[,1]))
myprobit <- glm(x[,2] ~ x[,1], family = binomial(link = "probit"))
summary(myprobit)
x[,2]
x[,1]
myprobit <- glm(x[,2] ~ x[,1], family = binomial(link = "probit"))
summary(myprobit)
rm(list=ls(all=TRUE))
x <- read.csv("C:/Users/3047380/Desktop/us.csv", header=TRUE)
xd <- x[,1]
x <- as.matrix(x[,2:3])
x <- apply(x, 2, as.numeric)
myprobit <- glm(x[,2] ~ x[,1], family = binomial(link = "probit"))
## model summary
summary(myprobit)
x <- read.csv("C:/Users/3047380/Desktop/jp2.csv", header=TRUE)
xd <- x[,1]
x <- as.matrix(x[,2:3])
x <- apply(x, 2, as.numeric)
myprobit <- glm(x[,2] ~ x[,1], family = binomial(link = "probit"))
## model summary
summary(myprobit)
setwd("E:/Dropbox/BD2/Task2/R/")
setwd("E:/Dropbox/BD2/Task2/R/")
library("bigmemory")
setwd("E:/Dropbox/BD2/Task2/R/bd")
setwd("E:/Dropbox/BD2/Task2/R/bd")
tp <- 100000
nev <- 1000000
N <- tp/100
N
tp <- (3600*24)*365
tp
tp <- 100000
nev <- 1000000
N <- tp/100
N
tp <- 100000
nev <- 1000000
iS <- 100
N <- tp/iS
iS
N
runif(5)
rep(runif(5), 2)
d <- matrix(runif(5), 5, 2)
View(d)
d <- big.matrix(nev, N, type="integer")
iS <- 1000
N <- tp/iS
N
d <- big.matrix(nev, N, type="integer")
iS <- 10000
N <- tp/iS
N
# We will split this in 10000s to make it easier
iS <- 10000
N <- tp/iS
d <- big.matrix(nev, N, type="integer")
d <- sapply(d, runif, nev, min=0, max=1)
runif
d <- sapply(d, runif, n=nev, min=0, max=1)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
lapply(x, mean)
sapply(x, quantile)
for(j in 1:NCOL(d))
{
d[,j] <- runif(nev, min=0, max=1)
}
d <- big.matrix(nev, N, type="integer")
head(d)
d <- big.matrix(nev, N, type="double")
head(d)
for(j in 1:NCOL(d))
{
d[,j] <- runif(nev, min=0, max=1)
}
head(d)
require(ggplot2)
data(diamonds)
diamonds
head(diamons)
head(diamonds)
NROW(diamons)
NROW(diamonss)
NROW(diamonds)
tableplot(d)
install.packages("tabplot")
library(tabplot)
tableplot(d)
colnames(d)
paste("N", 1:NCOL(d), sep="")
colnames(d) <- paste("N", 1:ncol(d), sep="")
options(bigmemory.allow.dimnames=TRUE)
colnames(d) <- paste("N", 1:ncol(d), sep="")
rownames(d) <- paste("nev", 1:nrow(d), sep="")
d <- big.matrix(nev, N, type="double")
for(j in 1:NCOL(d))
{
d[,j] <- runif(nev, min=0, max=1)
}
colnames(d) <- paste("N", 1:ncol(d), sep="")
tableplot(d)
source('~/.active-rstudio-document', echo=TRUE)
head(d)
head(d)
nrow(d)
head(rownames(d))
rownames(d) <- paste("nev", 1:nrow(d), sep="")
tableplot(d)
d <- big.matrix(nev, N, type="double",
dimnames=list(row=paste("nev", 1:nrow(d), sep=""),
col=paste("N", 1:ncol(d), sep="")))
head(d)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
d <- big.matrix(nev, N, type="double",
dimnames=list(row=paste("nev", 1:nrow(d), sep=""),
col=paste("N", 1:ncol(d), sep="")))
source('~/.active-rstudio-document', echo=TRUE)
head(d)
tableplot(d)
plot(d[,i])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(d)
head(e)
source('~/.active-rstudio-document', echo=TRUE)
head(d)
head(e)
temp <- aply(e, 2, sum)
temp <- apply(e, 2, sum)
temp
plot(temp, type="l")
is
iS
N
apply(e, 2, sum)
data[s, ] <- apply(e, 2, sum)
data <- matrix(NA, iS, N)
data[s, ] <- apply(e, 2, sum)
View(data)
system.time()
Sys.time()
source('~/.active-rstudio-document', echo=TRUE)
source('E:/Dropbox/BD2/Task2/R/bd/bigN.R', echo=TRUE)
s
ts
te
te <- Sys.time()
te-ts
