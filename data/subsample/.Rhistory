}
colnames(x) <- c("x", "y")
cl <- kmeans(x, NROW(pmean))
plot(x, col = cl$cluster)
points(cl$centers, col = 1:2, pch = 8, cex = 2)
ap <- apcluster(negDistMat(r=2), x)
plot(ap, x)
ks <- k.elbow(x, 50)
ks
source("E:/Dropbox/BD2/Task2/R/mc-functions.R")
k.elbow(x, 50)
k.elbow2(x, 50)
pmean
psd
source('E:/Dropbox/BD2/Task2/R/sub/sub.R', echo=TRUE)
JL.predict.dim(NROW(M), 0.1)
NROW(M)
JL.predict.dim(NROW(M), 0.01)
JL.predict.dim(NROW(M), 0.5)
JL.predict.dim(NROW(M), 0.1)
source('E:/Dropbox/BD2/Task2/R/sub/sub.R', echo=TRUE)
100/10000
3685/10000
setwd("E:/Dropbox/BD2/Task2/R/sub/")
plot(M, type="l", main="Original Data")
plot(K1, type="l", main="Subsample 1, 3685 Obs.")
plot(K2, type="l", main="Subsample 2, 100 Obs.")
densM <- density(M)
densK1 <- density(K1)
densK2 <- density(K2)
plot(densM$x, densM$y, type="l", lwd=2,
xlab=paste("N = ", t, ", Bandwidth = ",
round(densM$bw, 5), sep=""), ylab="Density",
xlim=c(min(densM$x, densK1$x, densK2$x),
max(densM$x, densK1$x, densK2$x)))
lines(densK1$x, densK1$y, col="red")
lines(densK2$x, densK2$y, col="blue")
nrow <- events
ncol <- time periods
# Now, what if we have columns?
# nrow <- events
# ncol <- time periods
N <- 10000
c <- 100
D <- matrix(NA, N, c)
for(i in 1:c)
{
D[,i] <- runif(N, 0, 10)
Dp[,i] <- round(runif(N, 0, 1))
}
# Now, what if we have columns?
# nrow <- events
# ncol <- time periods
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
D[,i] <- runif(N, 0, 10)
Dp[,i] <- round(runif(N, 0, 1))
}
# First create the series using average
M <- apply(D, 2, sum)
M2 <- apply(D*Dp, 2, sum)
plot(M)
plot(M, type="l")
plot(M2, type="l")
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
D[,i] <- rnorm(N, mean=runif(1,0,5), sd=runif(1,0,1))
Dp[,i] <- round(runif(N, 0, 1))
}
M <- apply(D, 2, sum)
M2 <- apply(D*Dp, 2, sum)
plot(M, type="l")
colSums(D)
plot(M2, type="l")
Dp
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
D[,i] <- abs(rnorm(N, mean=runif(1,0,5), sd=runif(1,0,1)))
Dp[,i] <- round(runif(N, 0, 1))
}
M <- apply(D, 2, sum)
M2 <- apply(D*Dp, 2, sum)
plot(M, type="l")
plot(M2, type="l")
# Now, what if we have columns?
# nrow <- events
# ncol <- time periods
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
D[,i] <- abs(rnorm(N, mean=runif(1,0,5), sd=runif(1,0,1)))
Dp[,i] <- round(runif(N, 0, 1))
}
# First create the series using average
M <- apply(D, 2, mean)
M
plot(M, type="l")
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,5),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=mean(D[,i-1], runif(1,0,1)),
sd=sd(D[,i-1], runif(1,0,1)))
}
Dp[,i] <- round(runif(N, 0, 1))
}
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,5),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+runif(1,0,1)),
sd=(sd(D[,i-1])+runif(1,0,1)))
}
Dp[,i] <- round(runif(N, 0, 1))
}
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,5),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+runif(1,0,1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
M <- apply(D, 2, sum)
plot(M, type="l")
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,5),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+rnorm(1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
M <- apply(D, 2, sum)
plot(M, type="l")
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,5),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+rnorm(1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
D <- log(D)
# First create the series using average
M <- apply(D, 2, sum)
plot(M, type="l")
# Now, what if we have columns?
# nrow <- events
# ncol <- time periods
N <- 10000
c <- 100
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,5),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+rnorm(1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
M <- apply(D, 2, sum)
plot(M, type="l")
M2 <- apply(D*Dp, 2, sum)
plot(M2, type="l")
plot(M, type="l", type="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
N <- 100000
c <- 1000
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,5),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+rnorm(1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
# First create the series using average
M <- apply(D, 2, sum)
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
plot(log(M), type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
# Now, what if we have columns?
# nrow <- events
# ncol <- time periods
N <- 10000
c <- 500
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,5),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+rnorm(1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
# First create the series using average
M <- apply(D, 2, sum)
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
# Now, what if we have columns?
# nrow <- events
# ncol <- time periods
N <- 10000
c <- 500
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,5),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+rnorm(1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
# First create the series using average
M <- apply(D, 2, sum)
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
runif(1,0,5)
# Now, what if we have columns?
# nrow <- events
# ncol <- time periods
N <- 10000
c <- 500
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,0.2),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+rnorm(1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
# First create the series using average
M <- apply(D, 2, sum)
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
# Now, what if we have columns?
# nrow <- events
# ncol <- time periods
N <- 10000
c <- 500
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,0.2),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+rnorm(1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
# First create the series using average
M <- apply(D, 2, sum)
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
# Now, what if we have columns?
# nrow <- events
# ncol <- time periods
N <- 10000
c <- 500
D <- matrix(NA, N, c)
Dp <- D
for(i in 1:c)
{
if(i==1){
D[,i] <- abs(rnorm(N, mean=runif(1,0,0.2),
sd=runif(1,0,1)))
}else{
D[,i] <- abs(rnorm(N, mean=(mean(D[,i-1])+rnorm(1)),
sd=(sd(D[,i-1])+runif(1,0,1))))
}
Dp[,i] <- round(runif(N, 0, 1))
}
# First create the series using average
M <- apply(D, 2, sum)
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
runif(1,0,0.2)
Dp[
]
M2 <- apply(D*Dp, 2, sum)
plot(M2, type="l")
D <- D/1000
M <- apply(D, 2, sum)
M2 <- apply(D*Dp, 2, sum)
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
ds <- round(JL.predict.distortion(NROW(D), 0.01))
ds <- JL.predict.dim(NCOL(D), 0.1)
d1 <- random.component.selection(d=ds, d.original=NROW(D))
d2 <- random.component.selection(d=100, d.original=NROW(D))
d1 <- sort(d1)
d2 <- sort(d2)
ds
NCOL(D)
JL.predict.dim(NCOL(D), 0.1)
NCOL(D)
d1 <- random.component.selection(d=100, d.original=NCOL(D))
d2 <- random.component.selection(d=200, d.original=NCOL(D))
d1
d2
d1 <- sort(d1)
d2 <- sort(d2)
d1
d2
K1 <- apply(D[,d1], 2, sum)
K2 <- apply(D[,d2], 2, sum)
plot(M, type="l")
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
plot(K1, type="l")
plot(K2, type="l")
# then subsample time and NOT events
d1 <- random.component.selection(d=100, d.original=NCOL(D))
d2 <- random.component.selection(d=250, d.original=NCOL(D))
d1 <- sort(d1)
d2 <- sort(d2)
K1 <- apply(D[,d1], 2, sum)
K2 <- apply(D[,d2], 2, sum)
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
plot(M, type="l", main="Original Data")
plot(K1, type="l", main="Subsample 1, T=100, N=10000")
plot(K2, type="l", main="Subsample 1, T=250, N=10000")
densM <- density(M)
densK1 <- density(K1)
densK2 <- density(K2)
plot(densM$x, densM$y, type="l", lwd=2,
xlab=paste("N = ", t, ", Bandwidth = ",
round(densM$bw, 5), sep=""), ylab="Density",
xlim=c(min(densM$x, densK1$x, densK2$x),
max(densM$x, densK1$x, densK2$x)))
lines(densK1$x, densK1$y, col="red")
lines(densK2$x, densK2$y, col="blue")
1/5
out.d <- cbind(rbind(mean(M), mean(K1), mean(K2)),
rbind(sd(M), sd(K1), sd(K2)),
rbind(min(M), min(K1), min(K2)),
rbind(max(M), max(K1), max(K2)),
rbind(median(M), median(K1), median(K2)),
rbind(skewness(M), skewness(K1), skewness(K2)),
rbind(kurtosis(M), kurtosis(K1), kurtosis(K2)))
write.csv(t(out.d), paste("2N", t, "t(out.d).csv", sep=""))
out.d
ds <- JL.predict.dim(NROW(D), 0.1)
ds
# then subsample events and not time
ds <- JL.predict.dim(NROW(D), 0.1)
d1 <- random.component.selection(d=ds, d.original=NROW(D))
d2 <- random.component.selection(d=100, d.original=NROW(D))
d1 <- sort(d1)
d2 <- sort(d2)
K1 <- apply(D[d1,], 2, sum)
K2 <- apply(D[d2,], 2, sum)
plot(M, type="l", main="Simulated Time Series",
xlab=paste("N = ", N, ", T = ", c, sep=""))
plot(M, type="l", main="Original Data")
# then subsample events and not time
ds
plot(M, type="l", main="Original Data")
plot(K1, type="l", main="Subsample 1, T=500, N=3685")
plot(K2, type="l", main="Subsample 2, T=500, N=100")
densM <- density(M)
densK1 <- density(K1)
densK2 <- density(K2)
plot(densM$x, densM$y, type="l", lwd=2,
xlab=paste("N = ", t, ", Bandwidth = ",
round(densM$bw, 5), sep=""), ylab="Density",
xlim=c(min(densM$x, densK1$x, densK2$x),
max(densM$x, densK1$x, densK2$x)))
lines(densK1$x, densK1$y, col="red")
lines(densK2$x, densK2$y, col="blue")
plot(densM$x, densM$y, type="l", lwd=2,
xlab=paste("N = ", t, ", Bandwidth = ",
round(densM$bw, 5), sep=""), ylab="Density",
xlim=c(min(densM$x, densK1$x, densK2$x),
max(densM$x, densK1$x, densK2$x)),
ylim=c(min(densM$y, densK1$y, densK2$y),
max(densM$y, densK1$y, densK2$y)))
lines(densK1$x, densK1$y, col="red")
lines(densK2$x, densK2$y, col="blue")
plot(M, type="l", main="Original Data")
plot(K1, type="l", main="Subsample 1, T=500, N=3685")
plot(K2, type="l", main="Subsample 2, T=500, N=100")
plot(M, type="l", main="Original Data")
plot(K1, type="l", main="Subsample 1, T=500, N=3685")
plot(K2, type="l", main="Subsample 2, T=500, N=100")
install.packages("rCUR")
library(rCUR)
cur1 <- CUR(D, c=500, r=100, method="random")
cur2 <- CUR(D, c=500, r=100, method="top.scores")
plotLeverage(cur1, C=TRUE, mplr=1000, top.n=100,
top.col='red', top.pch=16, ul.col='red',
ul.lty=2)
plotLeverage(cur1)
cur1$C.leverage.score
cur1@C.leverage.score
cur1@R.leverage.score
lscore <- cur1@R.leverage.score
plot(lscore, type="l")
c.ind <- cur1@C.index
r.ind <- cur1@R.index
r.ind
c.ind <- cur1@C.index
r.ind <- cur1@R.index
K1 <- apply(D[r.ind ,c.ind], 2, sum)
c.ind <- cur2@C.index
r.ind <- cur2@R.index
K2 <- apply(D[r.ind ,c.ind], 2, sum)
plot(M, type="l", main="Original Data")
plot(K1, type="l", main="Subsample 1, T=500, N=3685")
plot(K2, type="l", main="Subsample 2, T=500, N=100")
plot(M, type="l", main="Original Data")
plot(K1, type="l", main="Subsample 1, Random")
plot(K2, type="l", main="Subsample 2, Top Scores")
densM <- density(M)
densK1 <- density(K1)
densK2 <- density(K2)
plot(densM$x, densM$y, type="l", lwd=2,
xlab=paste("N = ", t, ", Bandwidth = ",
round(densM$bw, 5), sep=""), ylab="Density",
xlim=c(min(densM$x, densK1$x, densK2$x),
max(densM$x, densK1$x, densK2$x)))
lines(densK1$x, densK1$y, col="red")
lines(densK2$x, densK2$y, col="blue")
